#!/bin/bash
#	Created Volarics Istvan by Voli; volaricsi@volarics.hu

#:::::: Fix beallitasok :::::::
SNAP_DIR=SnapShot 					## Ebben a könyvtárban kerülnek tárolásra a pillanatképek
LOG_FILE=/var/log/btrfs_snapper.log			## Ide készül napló ha kérted
LOG_FORMAT="+%Y.%m.%d. %R:%S ==> " 			## Az időbélyegek formája
#:::::: Beallitasok :::::::::::
DEV=$1							## Melyik meghajtóval foglalkozunk
MODE=$2							## Milyen pillanatképet készítünk
DEV_Neve=${DEV//\//.} 					## Ha át akarod írni bash-ról sh-ra: $( echo ${DEV}|sed 's/\//./g' )
DIR="/mnt/${DEV_Neve}" 					## Ide történik a felcsatolás

Felszamolas(){ 										## Felszámolom a környezetet
	umount ${DIR}; mountpoint -q ${DIR} ; Ret=$?
	  if [ $Ret -ne 0 ] ; then
		rmdir  ${DIR}
	else
		echo "A csatolás még létezik!!!!!!!!" 	>>${LOG_FILE}
	fi
}

Szinkronizal(){
	btrfs subvolume sync ${DIR} 			>>${LogFile}			## A változásokat kiszinkronizálom
	date "${LOG_FORMAT} subvolsync vége" 		>>${LogFile}			## Itt a vége
}

case ${MODE} in
	(oras) 	Count=$( date +%H )
	    ;;
	(heti) 	Count=$( date +%w )
	    ;;
	(napi) 	Count=$( date +%d )
	    ;;
	(hetes) Count=$( date +%U )
	    ;;
	(havi) 	Count=$( date +%m )
	    ;;
	(*) 	echo "Usage: $0 [DEV|UUID=XXX-..XX] [oras(24)|heti(7)|hetes(52)|napi(31)|havi(12)]"
		exit 1
	    ;;
esac

#:::::::: Start :::::::::::::::
	Drive=$( blkid |sed 's|"||g' |grep -e ":.*$1" |sed 's|:.*||' ) 			## Ha UUID van megadva akkor kikeresem a DEV nevet
	[ -n "$Drive" ] && exec $(readlink --no-newline -f $0) $Drive $2 		## és azzal hívom meg magamat


	StartTime=$( date +%s )								## Kell a futási idő számításhoz

	if [ ! -e ${DEV} ]; then echo "Nem létező device: ${DEV}..."; exit 1; fi

	if [ -e ${DIR} ]; then
		echo "létező könyvtár: ${DIR}..."
		rmdir ${DIR} 2>&1
		if [ $? -ne 0 ]; then echo "Nem sikerült letörölni...."; exit 1; fi
	fi

	mkdir ${DIR} 2>&1
	mount ${DEV} ${DIR} -o subvol=/
	mountpoint -q ${DIR}
	if [ $? -ne 0 ]; then echo "Nem sikerült csatolni: ${DIR}."; exit 1; fi 		## Sikertelen csatolás

	[ ! -e ${DIR}/${SNAP_DIR}/${MODE} ] && mkdir -p ${DIR}/${SNAP_DIR}/${MODE} 		## Legyen meg a könyvtár structura ahova mentek
	CurDir="${DIR}/${SNAP_DIR}/${MODE}" 							## Itt fogok dolgozni
	LogFile="${CurDir}/${Count}.log"							## Ide fogok Naplózni
	date "${LOG_FORMAT} Kezdés" 			>${LogFile}				## Most kezdek

	find $CurDir -maxdepth 1 -type d -printf "%f\n" |grep "^${Count}-" |while read dir; do				## A régi mind törölve
		btrfs subvolume delete "$CurDir/$dir"
	done 						>>${LogFile}
	date "${LOG_FORMAT} Törlések vége" 		>>${LogFile}

	btrfs subvolume list $DIR| grep -v $SNAP_DIR |sed 's|.*path||' |while read Vol; do 				## Minden subvol-ról mentés
		Vold=${Vol//\//.}
		btrfs subvolume snapshot -r "$DIR/$Vol" "$CurDir/${Count}-${Vold}"
	done 						>>${LogFile}
	date "${LOG_FORMAT} --> snapshot készítés kész" >>${LogFile}

	eval NemKell='$'NEMKELL_${MODE} 										## A kivételeket letörlöm mert nem kellenek...
	for kimarad in ${NemKell} ${NEMKELL} ; do
		[ -d $CurDir/${Count}-${kimarad} ] && btrfs subvolume delete "$CurDir/${Count}-${kimarad}"
	done 						>>${LogFile}

	eval NemKell='$'NEMKELL_${MODE}_kezd 										## Így kezdődő snapshot-okat is törlöm
	for kimarad in ${NemKell} ${NEMKELL_kezd}; do
		find ${CurDir} -maxdepth 1 -type d -printf "%f\n" |grep "${Count}-${kimarad}" |while read dir; do
			btrfs subvolume delete "$CurDir/$dir"
		done
	done 						>>${LogFile}
	date "${LOG_FORMAT} Ami nem kell az törölve" 	>>${LogFile}

	if [ -n "${BTRFS_NOSYNC}" ]; then										## Most elmarad a szinkronizálás
	    date "${LOG_FORMAT} Nincs kényszerített szinkronizálás" 		>>${LogFile}
	else
	    Szinkronizal
	fi

	RunTime=$[ $( date +%s ) - ${StartTime} ] 									## Ennyi ideig dolgoztam
	[ ${RunTime} -lt 100 ] && RunTime=" ${RunTime}" ; [ ${RunTime} -lt 10 ] && RunTime=" ${RunTime}" 		## Az igazítás miatt kell
	echo "Futási idő: ${RunTime} sec."		>>${LogFile}

	Felszamolas

	[ ".$BTRFS_SNAP_time" != "." ] && echo "Futási idő (${DEV}) : ${RunTime} sec." 							## Csak tesztelés idejére
	[ ".$BTRFS_SNAP_log"  != "." ] && date "+%Y.%m.%d. %H:%M:%S ==> ${DEV}(${MODE}): 	${RunTime} sec." >>${LOG_FILE}		## Nappló a későbbre

exit 0
